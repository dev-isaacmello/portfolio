---
import { Icon } from 'astro-icon/components';
import { getNavItems } from '../consts/navbar';
import { getLangFromUrl, useTranslations, useTranslatedPath } from '../i18n/utils';
import LanguagePicker from './LanguagePicker.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
const navItems = getNavItems(t);
---

<nav class="fixed top-0 left-0 right-0 z-50 transition-all duration-500">
  <div class="absolute inset-0 bg-white/5 dark:bg-black/5 backdrop-blur-xl border-b border-white/10 dark:border-white/5 transition-all duration-500 group-hover:bg-white/10 dark:group-hover:bg-black/10"></div>
  
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
    <div class="flex justify-between items-center h-20 sm:h-24">
      
      <div class="flex items-center space-x-3 group">
        <div class="relative">
          <div class="absolute inset-0 bg-gradient-to-br from-slate-800 to-black dark:from-white dark:to-gray-100 rounded-2xl blur-xl opacity-0 group-hover:opacity-30 transition-opacity duration-500"></div>
        </div>
        
        <div class="flex flex-col">
          <span class="text-xl sm:text-2xl font-black bg-gradient-to-r from-slate-800 via-slate-900 to-black dark:from-white dark:via-gray-100 dark:to-gray-200 bg-clip-text text-transparent group-hover:from-slate-700 group-hover:via-slate-800 group-hover:to-slate-900 dark:group-hover:from-gray-200 dark:group-hover:via-gray-100 dark:group-hover:to-white transition-all duration-500">
            Isaac Mello
          </span>
          <span class="text-xs sm:text-sm text-slate-600 dark:text-gray-400 font-medium -mt-1 group-hover:text-slate-800 dark:group-hover:text-white transition-colors duration-500">
            Full Stack Developer
          </span>
        </div>
      </div>

      <div class="hidden lg:flex items-center space-x-1">
        {navItems.map((item, index) => (
          <a
            href={item.href}
            class="group relative px-6 py-3 text-slate-700 dark:text-gray-300 hover:text-slate-800 dark:hover:text-white transition-all duration-300 font-medium rounded-2xl hover:bg-white/10 dark:hover:bg-white/5 overflow-hidden"
            style={`animation-delay: ${index * 100}ms`}
          >
            <div class="absolute inset-0 bg-gradient-to-r from-white/10 to-gray-200/10 opacity-0 group-hover:opacity-100 transition-all duration-500 transform scale-x-0 group-hover:scale-x-100 origin-left"></div>
            
            <span class="relative z-10 flex items-center space-x-2">
              <Icon name={item.icon} class="w-4 h-4 group-hover:scale-110 transition-transform duration-300" />
              <span class="font-semibold">{item.label}</span>
            </span>
            
            <div class="absolute bottom-0 left-0 w-0 h-1 bg-gradient-to-r from-slate-800 via-slate-900 to-black dark:from-white dark:via-gray-100 dark:to-gray-200 group-hover:w-full transition-all duration-500 rounded-full"></div>
            
            <div class="absolute top-2 left-2 w-1 h-1 bg-slate-600 dark:bg-white rounded-full opacity-0 group-hover:opacity-100 group-hover:animate-bounce transition-all duration-500"></div>
            <div class="absolute top-2 right-2 w-1 h-1 bg-slate-700 dark:bg-gray-100 rounded-full opacity-0 group-hover:opacity-100 group-hover:animate-bounce transition-all duration-500" style="animation-delay: 200ms;"></div>
          </a>
        ))}
      </div>

      <div class="flex items-center space-x-3">
        <LanguagePicker />
        <button
          id="theme-toggle"
          class="group relative p-3 rounded-2xl bg-white/10 dark:bg-black/20 backdrop-blur-xl text-slate-700 dark:text-gray-300 hover:bg-white/20 dark:hover:bg-black/30 hover:text-slate-800 dark:hover:text-white transition-all duration-500 border border-white/20 dark:border-white/10 hover:border-slate-800/50 dark:hover:border-white/30 hover:scale-110 hover:shadow-lg hover:shadow-slate-800/20 dark:hover:shadow-white/20"
          aria-label="Toggle theme"
        >
          <div class="absolute inset-0 bg-gradient-to-r from-slate-800/20 to-black/20 dark:from-white/20 dark:to-gray-100/20 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          
          <Icon name="lucide:sun" class="w-5 h-5 hidden dark:block relative z-10 group-hover:rotate-90 transition-transform duration-500" />
          <Icon name="lucide:moon" class="w-5 h-5 block dark:hidden relative z-10 group-hover:-rotate-90 transition-transform duration-500" />
          
          <div class="absolute inset-0 bg-gradient-to-r from-slate-800 to-black dark:from-white dark:to-gray-100 rounded-2xl blur-xl opacity-0 group-hover:opacity-20 transition-opacity duration-500"></div>
        </button>

        <button
          id="mobile-menu-btn"
          class="lg:hidden group relative p-3 rounded-2xl bg-white/10 dark:bg-black/20 backdrop-blur-xl text-slate-700 dark:text-gray-300 hover:bg-white/20 dark:hover:bg-black/30 hover:text-slate-800 dark:hover:text-white transition-all duration-500 border border-white/20 dark:border-white/10 hover:border-slate-800/50 dark:hover:border-white/30 hover:scale-110 hover:shadow-lg hover:shadow-slate-800/20 dark:hover:shadow-white/20"
          aria-label="Toggle mobile menu"
        >
          <div class="absolute inset-0 bg-gradient-to-r from-slate-800/20 to-black/20 dark:from-white/20 dark:to-gray-100/20 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          
          <div class="relative z-10 w-5 h-5 flex flex-col justify-center items-center">
            <span class="w-5 h-0.5 bg-current transform transition-all duration-300 group-hover:rotate-45 group-hover:translate-y-1.5"></span>
            <span class="w-5 h-0.5 bg-current transform transition-all duration-300 group-hover:opacity-0"></span>
            <span class="w-5 h-0.5 bg-current transform transition-all duration-300 group-hover:-rotate-45 group-hover:-translate-y-1.5"></span>
          </div>
          
          <div class="absolute inset-0 bg-gradient-to-r from-slate-800 to-black dark:from-white dark:to-gray-100 rounded-2xl blur-xl opacity-0 group-hover:opacity-20 transition-opacity duration-500"></div>
        </button>
      </div>
    </div>
  </div>

  <div id="mobile-menu" class="lg:hidden hidden bg-white/95 dark:bg-black/95 backdrop-blur-xl border-t border-white/20 dark:border-white/10 transform translate-y-[-100%] transition-all duration-500">
    <div class="px-4 py-8 space-y-2">
      {navItems.map((item, index) => (
        <a
          href={item.href}
          class="group flex items-center space-x-4 px-6 py-4 text-slate-700 dark:text-gray-300 hover:text-slate-800 dark:hover:text-white hover:bg-gradient-to-r hover:from-slate-800/10 hover:to-black/10 dark:hover:from-white/10 dark:hover:to-gray-100/10 rounded-2xl transition-all duration-300 font-medium transform hover:translate-x-2 hover:scale-105"
          style={`animation-delay: ${index * 100}ms`}
        >
          <div class="relative p-3 rounded-xl bg-gradient-to-r from-slate-100/50 to-slate-200/50 dark:from-slate-800/30 dark:to-slate-700/30 group-hover:from-slate-200/70 dark:group-hover:from-slate-700/50 group-hover:to-slate-300/70 dark:group-hover:to-slate-600/50 transition-all duration-300">
            <Icon name={item.icon} class="w-5 h-5 group-hover:scale-110 transition-transform duration-300" />
            
            <div class="absolute inset-0 bg-gradient-to-r from-slate-800 to-black dark:from-white dark:to-gray-100 rounded-xl blur-lg opacity-0 group-hover:opacity-20 transition-opacity duration-300"></div>
          </div>
          
          <span class="font-semibold text-lg">{item.label}</span>
          
          <Icon name="lucide:arrow-right" class="w-4 h-4 ml-auto opacity-0 group-hover:opacity-100 group-hover:translate-x-1 transition-all duration-300" />
        </a>
      ))}
      
      <div class="pt-6 mt-6 border-t border-white/20 dark:border-white/10">
        <div class="text-center text-sm text-slate-600 dark:text-gray-400">
          <p>Desenvolvido com ❤️ por Isaac Mello</p>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  class ThemeManager {
    private html: HTMLElement;
    private themeToggle: HTMLElement | null;
    private currentTheme: string;

    constructor() {
      this.html = document.documentElement;
      this.themeToggle = document.getElementById('theme-toggle');
      this.currentTheme = this.getInitialTheme();
      this.init();
    }

    private getInitialTheme(): string {
      try {
        if (typeof localStorage !== 'undefined') {
          const savedTheme = localStorage.getItem('theme');
          if (savedTheme === 'light' || savedTheme === 'dark') {
            return savedTheme;
          }
        }

        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }

        return 'light';
      } catch (error) {
        console.warn('Error getting initial theme, defaulting to light:', error);
        return 'light';
      }
    }

    private init(): void {
      try {
        this.applyTheme(this.currentTheme);
        this.setupEventListeners();
        this.setupSystemThemeListener();
      } catch (error) {
        throw new Error('Error initializing theme manager:');
        this.fallbackToLight();
      }
    }

    private applyTheme(theme: string): void {
      try {
        this.html.classList.remove('light', 'dark');
        this.html.classList.add(theme);
        this.html.setAttribute('data-theme', theme);
        this.currentTheme = theme;
        
        if (typeof localStorage !== 'undefined') {
          localStorage.setItem('theme', theme);
        }
        
        window.dispatchEvent(new CustomEvent('themeChange', { 
          detail: { theme: theme } 
        }));
        
        console.log(`Theme applied: ${theme}`);
      } catch (error) {
        throw new Error('Error applying theme:');
        this.fallbackToLight();
      }
    }

    private fallbackToLight(): void {
      this.html.classList.remove('dark');
      this.html.classList.add('light');
      this.html.setAttribute('data-theme', 'light');
      this.currentTheme = 'light';
      if (typeof localStorage !== 'undefined') {
        localStorage.setItem('theme', 'light');
      }
    }

    private toggleTheme(): void {
      const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';
      this.applyTheme(newTheme);
    }

    private setupEventListeners(): void {
      if (this.themeToggle) {
        this.themeToggle.addEventListener('click', () => {
          this.toggleTheme();
        });
      }
    }

    private setupSystemThemeListener(): void {
      if (window.matchMedia) {
        try {
          const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
          
          const handleChange = (e: MediaQueryListEvent) => {
            if (!localStorage.getItem('theme')) {
              const newTheme = e.matches ? 'dark' : 'light';
              this.applyTheme(newTheme);
            }
          };

          if (mediaQuery.addEventListener) {
            mediaQuery.addEventListener('change', handleChange);
          } else {
            mediaQuery.addListener(handleChange);
          }
        } catch (error) {
          throw new Error('Error setting up system theme listener:');
        }
      }
    }

    public getCurrentTheme(): string {
      return this.currentTheme;
    }
  }

  class MobileMenuManager {
    private mobileMenuBtn: HTMLElement | null;
    private mobileMenu: HTMLElement | null;
    private isOpen: boolean = false;

    constructor() {
      this.mobileMenuBtn = document.getElementById('mobile-menu-btn');
      this.mobileMenu = document.getElementById('mobile-menu');
      this.init();
    }

    private init(): void {
      this.setupEventListeners();
    }

    private setupEventListeners(): void {
      if (this.mobileMenuBtn && this.mobileMenu) {
        this.mobileMenuBtn.addEventListener('click', () => {
          this.toggleMenu();
        });

        const mobileLinks = this.mobileMenu.querySelectorAll('a');
        mobileLinks.forEach(link => {
          link.addEventListener('click', () => {
            this.closeMenu();
          });
        });

        document.addEventListener('click', (e) => {
          if (this.mobileMenu && !this.mobileMenu.contains(e.target as Node) && 
              this.mobileMenuBtn && !this.mobileMenuBtn.contains(e.target as Node)) {
            this.closeMenu();
          }
        });

        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && this.isOpen) {
            this.closeMenu();
          }
        });
      }
    }

    private toggleMenu(): void {
      if (this.mobileMenu) {
        this.isOpen = !this.isOpen;
        
        if (this.isOpen) {
          this.mobileMenu.classList.remove('hidden');
          this.mobileMenu.classList.remove('translate-y-[-100%]');
          this.mobileMenu.classList.add('translate-y-0');
          
          const menuItems = this.mobileMenu.querySelectorAll('a');
          menuItems.forEach((item, index) => {
            (item as HTMLElement).style.animationDelay = `${index * 100}ms`;
            item.classList.add('animate-fadeInUp');
          });
        } else {
          this.closeMenu();
        }
      }
    }

    private closeMenu(): void {
      if (this.mobileMenu) {
        this.isOpen = false;
        this.mobileMenu.classList.add('translate-y-[-100%]');
        this.mobileMenu.classList.remove('translate-y-0');
        
        setTimeout(() => {
          this.mobileMenu?.classList.add('hidden');
        }, 500);
      }
    }
  }

  class SmoothScrollManager {
    constructor() {
      this.init();
    }

    private init(): void {
      this.setupEventListeners();
    }

    private setupEventListeners(): void {
      const navLinks = document.querySelectorAll('a[href^="#"]');
      navLinks.forEach((link) => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href');
          if (targetId) {
            this.scrollToTarget(targetId);
          }
        });
      });
    }

    private scrollToTarget(targetId: string): void {
      try {
        const targetElement = document.querySelector(targetId);
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      } catch (error) {
        throw new Error('Error scrolling to target:');
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    try {
      new ThemeManager();
      new MobileMenuManager();
      new SmoothScrollManager();
    } catch (error) {
      throw new Error('Error initializing navbar managers:');
    }
  });

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
    });
  } else {
    try {
      new ThemeManager();
      new MobileMenuManager();
      new SmoothScrollManager();
      } catch (error) {
      throw new Error('Error initializing navbar managers (DOM already ready):');
    }
  }
</script>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fadeInUp {
    animation: fadeInUp 0.5s ease-out forwards;
  }
  
  .group:hover .group-hover\:scale-110 {
    transform: scale(1.1);
  }
  
  .group:hover .group-hover\:rotate-12 {
    transform: rotate(12deg);
  }
  
  .group:hover .group-hover\:-rotate-90 {
    transform: rotate(-90deg);
  }
  
  .group:hover .group-hover\:rotate-90 {
    transform: rotate(90deg);
  }
</style>
