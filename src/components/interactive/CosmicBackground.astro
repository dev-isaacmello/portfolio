---
// Componente interativo para background c√≥smico
---

<div class="cosmic-background">
  <div class="cosmic-orb orb-1"></div>
  <div class="cosmic-orb orb-2"></div>
  <div class="cosmic-orb orb-3"></div>
  <div class="cosmic-orb orb-4"></div>
  <div class="cosmic-orb orb-5"></div>
  
  <div class="cosmic-star star-1"></div>
  <div class="cosmic-star star-2"></div>
  <div class="cosmic-star star-3"></div>
  <div class="cosmic-star star-4"></div>
  <div class="cosmic-star star-5"></div>
  <div class="cosmic-star star-6"></div>
  
  <div class="cosmic-comet comet-1"></div>
  <div class="cosmic-comet comet-2"></div>
  <div class="cosmic-comet comet-3"></div>
</div>

<script>
  class CosmicScrollManager {
    private scrollElements: NodeListOf<HTMLElement>;
    private orbs: NodeListOf<HTMLElement>;
    private sideStars: NodeListOf<HTMLElement>;
    private diagonalComets: NodeListOf<HTMLElement>;

    constructor() {
      this.scrollElements = document.querySelectorAll('.cosmic-orb, .cosmic-star, .cosmic-comet') as NodeListOf<HTMLElement>;
      this.orbs = document.querySelectorAll('.cosmic-orb') as NodeListOf<HTMLElement>;
      this.sideStars = document.querySelectorAll('.cosmic-star') as NodeListOf<HTMLElement>;
      this.diagonalComets = document.querySelectorAll('.cosmic-comet') as NodeListOf<HTMLElement>;
      this.init();
    }

    private init(): void {
      this.setupEventListeners();
      this.animateElements();
    }

    private setupEventListeners(): void {
      window.addEventListener('scroll', () => {
        this.animateElements();
      });
    }

    private animateElements(): void {
      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;

      this.orbs.forEach((orb, index) => {
        const speed = 0.5 + (index * 0.1);
        const yPos = -(scrollY * speed);
        orb.style.transform = `translateY(${yPos}px)`;
      });

      this.sideStars.forEach((star, index) => {
        const speed = 0.3 + (index * 0.05);
        const yPos = -(scrollY * speed);
        const xPos = Math.sin(scrollY * 0.01 + index) * 20;
        star.style.transform = `translate(${xPos}px, ${yPos}px)`;
      });

      this.diagonalComets.forEach((comet, index) => {
        const speed = 0.8 + (index * 0.2);
        const yPos = -(scrollY * speed);
        const xPos = (scrollY * speed * 0.5) + (index * 100);
        comet.style.transform = `translate(${xPos}px, ${yPos}px) rotate(${scrollY * 0.1}deg)`;
      });
    }
  }

  class SectionAnimationManager {
    private sections: NodeListOf<HTMLElement>;
    private animatedElements: NodeListOf<HTMLElement>;
    private observer: IntersectionObserver | null = null;
    private animationQueue: Map<string, HTMLElement[]> = new Map();

    constructor() {
      this.sections = document.querySelectorAll('section') as NodeListOf<HTMLElement>;
      this.animatedElements = document.querySelectorAll('[data-animate]') as NodeListOf<HTMLElement>;
      this.init();
    }

    private init(): void {
      this.setupIntersectionObserver();
      this.observeElements();
    }

    private setupIntersectionObserver(): void {
      this.observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            this.triggerAnimation(entry.target as HTMLElement);
          }
        });
      }, {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      });
    }

    private observeElements(): void {
      this.animatedElements.forEach((element) => {
        if (this.observer) {
          this.observer.observe(element);
        }
      });
    }

    private triggerAnimation(element: HTMLElement): void {
      const animationType = element.dataset.animate;
      const direction = element.dataset.direction || 'bottom';
      const distance = element.dataset.distance || '50';
      const delay = element.dataset.animateDelay || '0';

      element.style.setProperty('--animation-delay', `${delay}ms`);
      element.style.setProperty('--animation-distance', `${distance}px`);

      setTimeout(() => {
        element.classList.add('animate-in');
      }, parseInt(delay));

      if (this.observer) {
        this.observer.unobserve(element);
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    try {
      new CosmicScrollManager();
      new SectionAnimationManager();
    } catch (error) {
      console.error('Error initializing cosmic background managers:', error);
    }
  });

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      try {
        new CosmicScrollManager();
        new SectionAnimationManager();
      } catch (error) {
        console.error('Error initializing cosmic background managers (DOM loading):', error);
      }
    });
  } else {
    try {
      new CosmicScrollManager();
      new SectionAnimationManager();
    } catch (error) {
      console.error('Error initializing cosmic background managers (DOM ready):', error);
    }
  }
</script>

<style>
  .cosmic-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: -1;
    overflow: hidden;
  }

  .cosmic-orb {
    position: absolute;
    border-radius: 50%;
    background: radial-gradient(circle, rgba(147, 51, 234, 0.1) 0%, rgba(168, 85, 247, 0.05) 50%, transparent 100%);
    filter: blur(1px);
    animation: float 6s ease-in-out infinite;
  }

  .orb-1 {
    width: 200px;
    height: 200px;
    top: 10%;
    left: 10%;
    animation-delay: 0s;
  }

  .orb-2 {
    width: 150px;
    height: 150px;
    top: 60%;
    right: 15%;
    animation-delay: 2s;
  }

  .orb-3 {
    width: 100px;
    height: 100px;
    top: 30%;
    right: 30%;
    animation-delay: 4s;
  }

  .orb-4 {
    width: 80px;
    height: 80px;
    bottom: 20%;
    left: 20%;
    animation-delay: 1s;
  }

  .orb-5 {
    width: 120px;
    height: 120px;
    top: 80%;
    left: 60%;
    animation-delay: 3s;
  }

  .cosmic-star {
    position: absolute;
    width: 4px;
    height: 4px;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
    animation: twinkle 3s ease-in-out infinite;
  }

  .star-1 {
    top: 20%;
    left: 20%;
    animation-delay: 0s;
  }

  .star-2 {
    top: 40%;
    right: 25%;
    animation-delay: 1s;
  }

  .star-3 {
    top: 70%;
    left: 30%;
    animation-delay: 2s;
  }

  .star-4 {
    top: 15%;
    right: 40%;
    animation-delay: 0.5s;
  }

  .star-5 {
    bottom: 30%;
    right: 20%;
    animation-delay: 1.5s;
  }

  .star-6 {
    top: 50%;
    left: 70%;
    animation-delay: 2.5s;
  }

  .cosmic-comet {
    position: absolute;
    width: 2px;
    height: 2px;
    background: linear-gradient(45deg, rgba(147, 51, 234, 0.8), transparent);
    border-radius: 50%;
    animation: comet-trail 8s linear infinite;
  }

  .comet-1 {
    top: 10%;
    left: 0%;
    animation-delay: 0s;
  }

  .comet-2 {
    top: 50%;
    right: 0%;
    animation-delay: 3s;
  }

  .comet-3 {
    bottom: 20%;
    left: 0%;
    animation-delay: 6s;
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0px) scale(1);
      opacity: 0.3;
    }
    50% {
      transform: translateY(-20px) scale(1.1);
      opacity: 0.6;
    }
  }

  @keyframes twinkle {
    0%, 100% {
      opacity: 0.3;
      transform: scale(1);
    }
    50% {
      opacity: 1;
      transform: scale(1.5);
    }
  }

  @keyframes comet-trail {
    0% {
      transform: translateX(-100px) translateY(0px);
      opacity: 0;
    }
    10% {
      opacity: 1;
    }
    90% {
      opacity: 1;
    }
    100% {
      transform: translateX(100vw) translateY(100px);
      opacity: 0;
    }
  }

  [data-animate] {
    opacity: 0;
    transform: translateY(50px);
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transition-delay: var(--animation-delay, 0ms);
  }

  [data-animate].animate-in {
    opacity: 1;
    transform: translateY(0);
  }

  [data-animate][data-direction="left"] {
    transform: translateX(-50px);
  }

  [data-animate][data-direction="left"].animate-in {
    transform: translateX(0);
  }

  [data-animate][data-direction="right"] {
    transform: translateX(50px);
  }

  [data-animate][data-direction="right"].animate-in {
    transform: translateX(0);
  }

  [data-animate][data-direction="top"] {
    transform: translateY(-50px);
  }

  [data-animate][data-direction="top"].animate-in {
    transform: translateY(0);
  }

  [data-animate][data-direction="bottom"] {
    transform: translateY(50px);
  }

  [data-animate][data-direction="bottom"].animate-in {
    transform: translateY(0);
  }
</style>
