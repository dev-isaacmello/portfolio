---
import { languages } from '../../i18n/ui';
import { getLangFromUrl, useTranslatedPath } from '../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);
---

<div class="language-picker relative group">
  <button 
    class="flex items-center space-x-2 px-4 py-2 bg-white/10 dark:bg-black/20 backdrop-blur-xl text-slate-700 dark:text-gray-300 hover:bg-white/20 dark:hover:bg-black/30 hover:text-slate-800 dark:hover:text-white transition-all duration-500 border border-white/20 dark:border-white/10 hover:border-slate-800/50 dark:hover:border-white/30 rounded-2xl hover:scale-105 hover:shadow-lg hover:shadow-slate-800/20 dark:hover:shadow-white/20"
    id="language-toggle"
    aria-label="Select language"
  >
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
    </svg>
    <span class="text-sm font-medium">{languages[lang]}</span>
    <svg class="w-4 h-4 transition-transform duration-300 group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>

  <div 
    id="language-menu" 
    class="absolute top-full right-0 mt-2 w-48 bg-white/95 dark:bg-gray-900/95 backdrop-blur-xl border border-white/20 dark:border-white/10 rounded-2xl shadow-xl shadow-slate-800/20 dark:shadow-white/20 opacity-0 invisible transform translate-y-2 transition-all duration-300 group-hover:opacity-100 group-hover:visible group-hover:translate-y-0 z-50"
  >
    <div class="py-2">
      {Object.entries(languages).map(([langCode, label]) => (
        <a
          href={translatePath('/', langCode)}
          class={`flex items-center space-x-3 px-4 py-3 text-sm font-medium transition-all duration-300 hover:bg-slate-100/50 dark:hover:bg-slate-800/50 ${
            langCode === lang 
              ? 'text-slate-800 dark:text-white bg-slate-100/30 dark:bg-slate-800/30' 
              : 'text-slate-600 dark:text-gray-300 hover:text-slate-800 dark:hover:text-white'
          }`}
        >
          <div class="w-6 h-4 rounded-sm overflow-hidden flex-shrink-0">
            {langCode === 'pt' && (
              <div class="w-full h-full bg-gradient-to-b from-green-600 to-yellow-500 flex items-center justify-center">
                <span class="text-white text-xs font-bold">PT</span>
              </div>
            )}
            {langCode === 'en' && (
              <div class="w-full h-full bg-gradient-to-b from-blue-600 to-red-500 flex items-center justify-center">
                <span class="text-white text-xs font-bold">EN</span>
              </div>
            )}
            {langCode === 'es' && (
              <div class="w-full h-full bg-gradient-to-b from-red-600 to-yellow-500 flex items-center justify-center">
                <span class="text-white text-xs font-bold">ES</span>
              </div>
            )}
          </div>
          <span>{label}</span>
          {langCode === lang && (
            <svg class="w-4 h-4 ml-auto text-slate-600 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
            </svg>
          )}
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  class LanguagePickerManager {
    private languagePicker: HTMLElement | null;
    private languageToggle: HTMLElement | null;
    private languageMenu: HTMLElement | null;
    private isOpen: boolean = false;

    constructor() {
      this.languagePicker = document.querySelector('.language-picker');
      this.languageToggle = document.getElementById('language-toggle');
      this.languageMenu = document.getElementById('language-menu');
      this.init();
    }

    private init(): void {
      this.setupEventListeners();
    }

    private setupEventListeners(): void {
      if (this.languageToggle && this.languageMenu) {
        // Toggle menu on click
        this.languageToggle.addEventListener('click', (e) => {
          e.stopPropagation();
          this.toggleMenu();
        });

        // Close menu when clicking outside
        document.addEventListener('click', (e) => {
          if (this.languagePicker && !this.languagePicker.contains(e.target as Node)) {
            this.closeMenu();
          }
        });

        // Close menu on escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && this.isOpen) {
            this.closeMenu();
          }
        });

        // Handle keyboard navigation
        this.setupKeyboardNavigation();
      }
    }

    private setupKeyboardNavigation(): void {
      if (this.languageToggle && this.languageMenu) {
        this.languageToggle.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.toggleMenu();
          } else if (e.key === 'ArrowDown') {
            e.preventDefault();
            this.openMenu();
            this.focusFirstMenuItem();
          }
        });

        this.languageMenu.addEventListener('keydown', (e) => {
          const menuItems = this.languageMenu?.querySelectorAll('a');
          if (!menuItems) return;

          const currentIndex = Array.from(menuItems).indexOf(e.target as HTMLAnchorElement);

          switch (e.key) {
            case 'ArrowDown':
              e.preventDefault();
              const nextIndex = (currentIndex + 1) % menuItems.length;
              (menuItems[nextIndex] as HTMLElement).focus();
              break;
            case 'ArrowUp':
              e.preventDefault();
              const prevIndex = currentIndex === 0 ? menuItems.length - 1 : currentIndex - 1;
              (menuItems[prevIndex] as HTMLElement).focus();
              break;
            case 'Escape':
              e.preventDefault();
              this.closeMenu();
              this.languageToggle?.focus();
              break;
            case 'Home':
              e.preventDefault();
              (menuItems[0] as HTMLElement).focus();
              break;
            case 'End':
              e.preventDefault();
              (menuItems[menuItems.length - 1] as HTMLElement).focus();
              break;
          }
        });
      }
    }

    private toggleMenu(): void {
      if (this.isOpen) {
        this.closeMenu();
      } else {
        this.openMenu();
      }
    }

    private openMenu(): void {
      if (this.languageMenu) {
        this.isOpen = true;
        this.languageMenu.classList.remove('opacity-0', 'invisible', 'translate-y-2');
        this.languageMenu.classList.add('opacity-100', 'visible', 'translate-y-0');
        
        // Add ARIA attributes
        this.languageToggle?.setAttribute('aria-expanded', 'true');
        this.languageMenu.setAttribute('aria-hidden', 'false');
      }
    }

    private closeMenu(): void {
      if (this.languageMenu) {
        this.isOpen = false;
        this.languageMenu.classList.remove('opacity-100', 'visible', 'translate-y-0');
        this.languageMenu.classList.add('opacity-0', 'invisible', 'translate-y-2');
        
        // Add ARIA attributes
        this.languageToggle?.setAttribute('aria-expanded', 'false');
        this.languageMenu.setAttribute('aria-hidden', 'true');
      }
    }

    private focusFirstMenuItem(): void {
      const firstMenuItem = this.languageMenu?.querySelector('a');
      if (firstMenuItem) {
        (firstMenuItem as HTMLElement).focus();
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    try {
      new LanguagePickerManager();
    } catch (error) {
      console.error('Error initializing language picker manager:', error);
    }
  });

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      try {
        new LanguagePickerManager();
      } catch (error) {
        console.error('Error initializing language picker manager (DOM loading):', error);
      }
    });
  } else {
    try {
      new LanguagePickerManager();
    } catch (error) {
      console.error('Error initializing language picker manager (DOM ready):', error);
    }
  }
</script>

<style>
  .language-picker:hover #language-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  /* Focus styles for accessibility */
  .language-picker button:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  .language-picker a:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
    background-color: rgba(59, 130, 246, 0.1);
  }

  /* Smooth transitions */
  .language-picker * {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
</style>
