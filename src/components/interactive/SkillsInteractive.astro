---
import { skills } from '../../consts/hero';
import { Icon } from 'astro-icon/components';
---

<div class="flex flex-wrap justify-center items-center gap-8 sm:gap-10 lg:gap-12">
  {skills.map((skill, index) => (
    <div
      class="skill-item group relative flex flex-col items-center transition-all duration-700 hover:scale-110 hover:-translate-y-2 cursor-pointer"
      style={`animation-delay: ${index * 100}ms`}
      data-skill-name={skill.name}
    >
       <div class="absolute inset-0 -m-4 rounded-3xl opacity-0 group-hover:opacity-100 transition-all duration-1000 group-hover:animate-pulse">
          <div class="w-full h-full rounded-3xl blur-xl scale-75 group-hover:scale-100 transition-all duration-1000 dark:bg-white/20 bg-slate-800/20"></div>
        </div>
        
        <div class="absolute inset-0 -m-6 rounded-3xl opacity-0 group-hover:opacity-70 transition-all duration-1500 group-hover:animate-pulse">
          <div class="w-full h-full rounded-3xl blur-2xl scale-50 group-hover:scale-100 transition-all duration-1500 dark:bg-white/15 bg-slate-800/15"></div>
        </div>
        
        <div class="absolute inset-0 -m-8 rounded-3xl opacity-0 group-hover:opacity-50 transition-all duration-2000 group-hover:animate-pulse">
          <div class="w-full h-full rounded-3xl blur-3xl scale-25 group-hover:scale-100 transition-all duration-2000 dark:bg-white/10 bg-slate-800/10"></div>
        </div>
      
     <div class="relative mb-3 p-4 rounded-2xl bg-gradient-to-br from-slate-50/80 via-white/60 to-slate-50/80 dark:from-gray-800/80 dark:via-gray-700/60 dark:to-gray-800/80 backdrop-blur-xl border border-slate-200/30 dark:border-gray-600/30 group-hover:border-slate-800/60 dark:group-hover:border-white/60 transition-all duration-500 group-hover:shadow-2xl group-hover:shadow-slate-800/30 dark:group-hover:shadow-white/30 group-hover:bg-gradient-to-br group-hover:from-white/95 group-hover:via-slate-50/90 group-hover:to-white/95 dark:group-hover:from-gray-700/95 dark:group-hover:via-gray-600/20 dark:group-hover:to-gray-700/95">
       <Icon name={skill.icon} class="w-8 h-8 sm:w-10 sm:h-10 text-slate-700 dark:text-gray-300 group-hover:text-slate-800 dark:group-hover:text-white transition-colors duration-500 relative z-10" />
         
       <div class="absolute inset-0 rounded-2xl bg-gradient-to-r opacity-0 group-hover:opacity-40 blur-xl transition-all duration-700 dark:bg-white/20 bg-slate-800/20"></div>
       
       <div class="absolute inset-0 rounded-2xl border-2 border-transparent group-hover:border-slate-800/60 dark:group-hover:border-white/60 transition-all duration-700 opacity-0 group-hover:opacity-100"></div>
     </div>
     
     <span class="text-sm sm:text-base font-semibold text-slate-700 dark:text-gray-300 group-hover:text-slate-800 dark:group-hover:text-white transition-colors duration-500 text-center relative z-10 group-hover:drop-shadow-lg">
       {skill.name}
     </span>
     
     <div class="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-0 h-1 bg-gradient-to-r from-slate-800 to-black dark:from-white dark:to-gray-200 group-hover:w-full transition-all duration-700 rounded-full shadow-lg group-hover:shadow-slate-800/50 dark:group-hover:shadow-white/50"></div>
     
     <div class="absolute -top-2 -left-2 w-2 h-2 bg-slate-600 dark:bg-white rounded-full opacity-0 group-hover:opacity-100 group-hover:animate-bounce transition-all duration-1000 group-hover:animate-ping"></div>
     <div class="absolute -top-2 -right-2 w-2 h-2 bg-slate-700 dark:bg-gray-100 rounded-full opacity-0 group-hover:opacity-100 group-hover:animate-bounce transition-all duration-1000 group-hover:animate-ping" style="animation-delay: 200ms;"></div>
     <div class="absolute -bottom-2 -left-2 w-2 h-2 bg-slate-800 dark:bg-gray-200 rounded-full opacity-0 group-hover:opacity-100 group-hover:animate-bounce transition-all duration-1000 group-hover:animate-ping" style="animation-delay: 400ms;"></div>
     <div class="absolute -bottom-2 -right-2 w-2 h-2 bg-slate-500 dark:bg-gray-300 rounded-full opacity-0 group-hover:opacity-100 group-hover:animate-bounce transition-all duration-1000 group-hover:animate-ping" style="animation-delay: 600ms;"></div>
   </div>
 ))}
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const skillItems = document.querySelectorAll('.skill-item');
    
    skillItems.forEach((skillItem: Element) => {
      skillItem.addEventListener('click', (e) => {
        createIncredibleClickAnimation(e, skillItem as HTMLElement);
      });
    });
    
    function createIncredibleClickAnimation(e: Event, skillItem: HTMLElement) {
      const rect = skillItem.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      
      const animationContainer = document.createElement('div');
      animationContainer.className = 'skill-click-animation';
      document.body.appendChild(animationContainer);
      
      createPurpleExplosion(animationContainer, centerX, centerY);
      createPurpleParticleBurst(animationContainer, centerX, centerY);
      createPurpleRingWaves(animationContainer, centerX, centerY);
      createPurpleLightning(animationContainer, centerX, centerY);
      createPurpleEnergyField(animationContainer, centerX, centerY);
      createPurpleShockwave(animationContainer, centerX, centerY);
      createPurpleMatrixRain(animationContainer, centerX, centerY);
      createPurplePortal(animationContainer, centerX, centerY);
      createPurpleTimeWarp(animationContainer, centerX, centerY);
      createPurpleQuantumFluctuation(animationContainer, centerX, centerY);
      
      const skillName = skillItem.getAttribute('data-skill-name');
      if (skillName) {
        createSkillNameDisplay(animationContainer, centerX, centerY, skillName);
      }
      
      setTimeout(() => {
        if (animationContainer.parentNode) {
          animationContainer.parentNode.removeChild(animationContainer);
        }
      }, 3000);
    }
    
    function createPurpleExplosion(container: HTMLElement, x: number, y: number) {
      const explosion = document.createElement('div');
      explosion.className = 'golden-explosion';
      explosion.style.left = `${x - 50}px`;
      explosion.style.top = `${y - 50}px`;
      container.appendChild(explosion);
    }
    
    function createPurpleParticleBurst(container: HTMLElement, x: number, y: number) {
      for (let i = 0; i < 20; i++) {
        const particle = document.createElement('div');
        particle.className = 'golden-particle-burst';
        particle.style.left = `${x - 4}px`;
        particle.style.top = `${y - 4}px`;
        
        const angle = (i / 20) * 2 * Math.PI;
        const distance = 100 + Math.random() * 200;
        const burstX = Math.cos(angle) * distance;
        const burstY = Math.sin(angle) * distance;
        
        particle.style.setProperty('--burst-x', `${burstX}px`);
        particle.style.setProperty('--burst-y', `${burstY}px`);
        
        container.appendChild(particle);
      }
    }
    
    function createPurpleRingWaves(container: HTMLElement, x: number, y: number) {
      for (let i = 0; i < 3; i++) {
        const ring = document.createElement('div');
        ring.className = 'golden-ring-wave';
        ring.style.left = `${x}px`;
        ring.style.top = `${y}px`;
        ring.style.animationDelay = `${i * 0.2}s`;
        container.appendChild(ring);
      }
    }
    
    function createPurpleLightning(container: HTMLElement, x: number, y: number) {
      for (let i = 0; i < 5; i++) {
        const lightning = document.createElement('div');
        lightning.className = 'golden-lightning';
        lightning.style.left = `${x - 2 + (i - 2) * 20}px`;
        lightning.style.top = `${y - 100}px`;
        lightning.style.animationDelay = `${i * 0.1}s`;
        container.appendChild(lightning);
      }
    }
    
    function createPurpleEnergyField(container: HTMLElement, x: number, y: number) {
      const energyField = document.createElement('div');
      energyField.className = 'golden-energy-field';
      energyField.style.left = `${x - 150}px`;
      energyField.style.top = `${y - 150}px`;
      container.appendChild(energyField);
    }
    
    function createPurpleShockwave(container: HTMLElement, x: number, y: number) {
      const shockwave = document.createElement('div');
      shockwave.className = 'golden-shockwave';
      shockwave.style.left = `${x}px`;
      shockwave.style.top = `${y}px`;
      container.appendChild(shockwave);
    }
    
    function createPurpleMatrixRain(container: HTMLElement, x: number, y: number) {
      for (let i = 0; i < 15; i++) {
        const rain = document.createElement('div');
        rain.className = 'golden-matrix-rain';
        rain.style.left = `${x - 100 + i * 15}px`;
        rain.style.top = `${y - 100}px`;
        rain.style.animationDelay = `${i * 0.05}s`;
        container.appendChild(rain);
      }
    }
    
    function createPurplePortal(container: HTMLElement, x: number, y: number) {
      const portal = document.createElement('div');
      portal.className = 'golden-portal';
      portal.style.left = `${x - 100}px`;
      portal.style.top = `${y - 100}px`;
      container.appendChild(portal);
    }
    
    function createPurpleTimeWarp(container: HTMLElement, x: number, y: number) {
      const timeWarp = document.createElement('div');
      timeWarp.className = 'golden-time-warp';
      timeWarp.style.left = '0px';
      timeWarp.style.top = '0px';
      container.appendChild(timeWarp);
    }
    
    function createPurpleQuantumFluctuation(container: HTMLElement, x: number, y: number) {
      const quantum = document.createElement('div');
      quantum.className = 'golden-quantum-fluctuation';
      quantum.style.left = `${x - 75}px`;
      quantum.style.top = `${y - 75}px`;
      container.appendChild(quantum);
    }
    
    function createSkillNameDisplay(container: HTMLElement, x: number, y: number, skillName: string) {
      const nameDisplay = document.createElement('div');
      nameDisplay.style.position = 'absolute';
      nameDisplay.style.left = `${x}px`;
      nameDisplay.style.top = `${y + 100}px`;
      nameDisplay.style.transform = 'translate(-50%, -50%)';
      nameDisplay.style.color = '#1e293b';
      nameDisplay.style.fontSize = '2rem';
      nameDisplay.style.fontWeight = 'bold';
      nameDisplay.style.textShadow = '0 0 20px rgba(30,41,59,0.8)';
      nameDisplay.style.zIndex = '10000';
      nameDisplay.style.pointerEvents = 'none';
      nameDisplay.style.animation = 'skillNameReveal 2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards';
      nameDisplay.textContent = skillName;
      
      const style = document.createElement('style');
      style.textContent = `
        @keyframes skillNameReveal {
          0% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(0) rotate(0deg);
            filter: blur(10px) brightness(0);
          }
          25% {
            opacity: 0.5;
            transform: translate(-50%, -50%) scale(1.2) rotate(90deg);
            filter: blur(5px) brightness(1.5);
          }
          50% {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1) rotate(180deg);
            filter: blur(0px) brightness(2);
          }
          75% {
            opacity: 0.8;
            transform: translate(-50%, -50%) scale(1.1) rotate(270deg);
            filter: blur(2px) brightness(1.8);
          }
          100% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(0) rotate(360deg);
            filter: blur(5px) brightness(1);
          }
        }
      `;
      document.head.appendChild(style);
      
      container.appendChild(nameDisplay);
    }
  });
</script>

<style>
  .skill-click-animation {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 9999;
    overflow: hidden;
  }
  
  .golden-explosion {
    position: absolute;
    width: 100px;
    height: 100px;
    background: radial-gradient(circle, rgba(30,41,59,1) 0%, rgba(15,23,42,0.8) 30%, rgba(51,65,85,0.6) 60%, transparent 100%);
    border-radius: 50%;
    animation: explosion-grow 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    transform-origin: center;
  }
  
  @keyframes explosion-grow {
    0% {
      transform: scale(0) rotate(0deg);
      opacity: 1;
      filter: brightness(1) blur(0px);
    }
    20% {
      transform: scale(2) rotate(90deg);
      opacity: 0.9;
      filter: brightness(1.5) blur(2px);
    }
    40% {
      transform: scale(4) rotate(180deg);
      opacity: 0.8;
      filter: brightness(2) blur(4px);
    }
    60% {
      transform: scale(6) rotate(270deg);
      opacity: 0.6;
      filter: brightness(2.5) blur(6px);
    }
    80% {
      transform: scale(8) rotate(360deg);
      opacity: 0.4;
      filter: brightness(3) blur(8px);
    }
    100% {
      transform: scale(10) rotate(720deg);
      opacity: 0;
      filter: brightness(4) blur(12px);
    }
  }
  
  .golden-particle-burst {
    position: absolute;
    width: 8px;
    height: 8px;
    background: radial-gradient(circle, rgba(30,41,59,1) 0%, rgba(15,23,42,0.8) 50%, transparent 100%);
    border-radius: 50%;
    animation: particle-burst 2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  }
  
  @keyframes particle-burst {
    0% {
      transform: translate(0, 0) scale(1) rotate(0deg);
      opacity: 1;
      filter: brightness(1) blur(0px);
    }
    25% {
      transform: translate(var(--burst-x), var(--burst-y)) scale(1.5) rotate(90deg);
      opacity: 0.9;
      filter: brightness(1.3) blur(1px);
    }
    50% {
      transform: translate(calc(var(--burst-x) * 1.5), calc(var(--burst-y) * 1.5)) scale(2) rotate(180deg);
      opacity: 0.7;
      filter: brightness(1.6) blur(2px);
    }
    75% {
      transform: translate(calc(var(--burst-x) * 2), calc(var(--burst-y) * 2)) scale(1.5) rotate(270deg);
      opacity: 0.4;
      filter: brightness(1.9) blur(3px);
    }
    100% {
      transform: translate(calc(var(--burst-x) * 2.5), calc(var(--burst-y) * 2.5)) scale(0.5) rotate(360deg);
      opacity: 0;
      filter: brightness(2.2) blur(4px);
    }
  }
  
  .golden-ring-wave {
    position: absolute;
    border: 3px solid rgba(30,41,59,0.8);
    border-radius: 50%;
    animation: ring-wave-expand 2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  }
  
  @keyframes ring-wave-expand {
    0% {
      width: 0;
      height: 0;
      opacity: 1;
      transform: translate(-50%, -50%) scale(0);
    }
    50% {
      width: 200px;
      height: 200px;
      opacity: 0.6;
      transform: translate(-50%, -50%) scale(1);
    }
    100% {
      width: 400px;
      height: 400px;
      opacity: 0;
      transform: translate(-50%, -50%) scale(2);
    }
  }
  
  .golden-lightning {
    position: absolute;
    width: 4px;
    height: 100px;
    background: linear-gradient(to bottom, transparent, rgba(147,51,234,1), rgba(168,85,247,0.8), transparent);
    animation: lightning-strike 1s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    transform-origin: top;
  }
  
  @keyframes lightning-strike {
    0% {
      transform: scaleY(0) rotate(0deg);
      opacity: 0;
      filter: brightness(1) blur(0px);
    }
    25% {
      transform: scaleY(1) rotate(45deg);
      opacity: 1;
      filter: brightness(2) blur(1px);
    }
    50% {
      transform: scaleY(1.2) rotate(90deg);
      opacity: 0.8;
      filter: brightness(3) blur(2px);
    }
    75% {
      transform: scaleY(1) rotate(135deg);
      opacity: 0.6;
      filter: brightness(2.5) blur(1px);
    }
    100% {
      transform: scaleY(0) rotate(180deg);
      opacity: 0;
      filter: brightness(2) blur(0px);
    }
  }
  
  .golden-energy-field {
    position: absolute;
    width: 300px;
    height: 300px;
    background: conic-gradient(from 0deg, transparent, rgba(147,51,234,0.3), rgba(168,85,247,0.5), rgba(196,181,253,0.3), transparent);
    border-radius: 50%;
    animation: energy-field-spin 2.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    transform-origin: center;
  }
  
  @keyframes energy-field-spin {
    0% {
      transform: scale(0) rotate(0deg);
      opacity: 0;
      filter: brightness(1) blur(0px);
    }
    30% {
      transform: scale(1) rotate(120deg);
      opacity: 0.8;
      filter: brightness(1.5) blur(2px);
    }
    60% {
      transform: scale(1.5) rotate(240deg);
      opacity: 0.6;
      filter: brightness(2) blur(4px);
    }
    100% {
      transform: scale(2) rotate(360deg);
      opacity: 0;
      filter: brightness(2.5) blur(6px);
    }
  }
  
  .golden-shockwave {
    position: absolute;
    width: 0;
    height: 0;
    border: 2px solid rgba(147,51,234,0.6);
    border-radius: 50%;
    animation: shockwave-expand 1.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    transform-origin: center;
  }
  
  @keyframes shockwave-expand {
    0% {
      width: 0;
      height: 0;
      opacity: 1;
      border-width: 4px;
    }
    50% {
      width: 300px;
      height: 300px;
      opacity: 0.5;
      border-width: 2px;
    }
    100% {
      width: 600px;
      height: 600px;
      opacity: 0;
      border-width: 1px;
    }
  }
  
  .golden-matrix-rain {
    position: absolute;
    width: 2px;
    height: 20px;
    background: linear-gradient(to bottom, rgba(147,51,234,1), rgba(168,85,247,0.8), transparent);
    animation: matrix-rain-fall 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    transform-origin: top;
  }
  
  @keyframes matrix-rain-fall {
    0% {
      transform: translateY(-100px) scaleY(0);
      opacity: 1;
      filter: brightness(1) blur(0px);
    }
    50% {
      transform: translateY(50px) scaleY(1);
      opacity: 0.8;
      filter: brightness(1.5) blur(1px);
    }
    100% {
      transform: translateY(200px) scaleY(0);
      opacity: 0;
      filter: brightness(2) blur(2px);
    }
  }
  
  .golden-portal {
    position: absolute;
    width: 200px;
    height: 200px;
    background: conic-gradient(from 0deg, transparent, rgba(147,51,234,0.8), rgba(168,85,247,0.6), rgba(196,181,253,0.4), transparent);
    border-radius: 50%;
    animation: portal-open 2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    transform-origin: center;
  }
  
  @keyframes portal-open {
    0% {
      transform: scale(0) rotate(0deg);
      opacity: 0;
      filter: brightness(1) blur(0px);
    }
    25% {
      transform: scale(0.5) rotate(90deg);
      opacity: 0.6;
      filter: brightness(1.5) blur(2px);
    }
    50% {
      transform: scale(1) rotate(180deg);
      opacity: 1;
      filter: brightness(2) blur(4px);
    }
    75% {
      transform: scale(1.2) rotate(270deg);
      opacity: 0.8;
      filter: brightness(2.5) blur(6px);
    }
    100% {
      transform: scale(1.5) rotate(360deg);
      opacity: 0;
      filter: brightness(3) blur(8px);
    }
  }
  
  .golden-time-warp {
    position: absolute;
    width: 100%;
    height: 100%;
    background: conic-gradient(from 0deg, transparent, rgba(147,51,234,0.1), rgba(168,85,247,0.2), rgba(196,181,253,0.1), transparent);
    animation: time-warp-distort 2.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    transform-origin: center;
  }
  
  @keyframes time-warp-distort {
    0% {
      transform: scale(1) rotate(0deg) skew(0deg);
      opacity: 0;
      filter: brightness(1) blur(0px);
    }
    25% {
      transform: scale(1.1) rotate(90deg) skew(5deg);
      opacity: 0.3;
      filter: brightness(1.3) blur(2px);
    }
    50% {
      transform: scale(1.2) rotate(180deg) skew(10deg);
      opacity: 0.6;
      filter: brightness(1.6) blur(4px);
    }
    75% {
      transform: scale(1.1) rotate(270deg) skew(5deg);
      opacity: 0.3;
      filter: brightness(1.3) blur(2px);
    }
    100% {
      transform: scale(1) rotate(360deg) skew(0deg);
      opacity: 0;
      filter: brightness(1) blur(0px);
    }
  }
  
  .golden-quantum-fluctuation {
    position: absolute;
    width: 150px;
    height: 150px;
    background: radial-gradient(circle, rgba(147,51,234,0.8) 0%, rgba(168,85,247,0.6) 30%, rgba(196,181,253,0.4) 60%, transparent 100%);
    border-radius: 50%;
    animation: quantum-fluctuation 2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    transform-origin: center;
  }
  
  @keyframes quantum-fluctuation {
    0% {
      transform: scale(0) rotate(0deg);
      opacity: 0;
      filter: brightness(1) blur(0px);
    }
    20% {
      transform: scale(0.8) rotate(72deg);
      opacity: 0.7;
      filter: brightness(1.4) blur(2px);
    }
    40% {
      transform: scale(1.2) rotate(144deg);
      opacity: 1;
      filter: brightness(1.8) blur(4px);
    }
    60% {
      transform: scale(0.9) rotate(216deg);
      opacity: 0.8;
      filter: brightness(1.5) blur(3px);
    }
    80% {
      transform: scale(1.1) rotate(288deg);
      opacity: 0.6;
      filter: brightness(1.2) blur(2px);
    }
    100% {
      transform: scale(0) rotate(360deg);
      opacity: 0;
      filter: brightness(1) blur(0px);
    }
  }
</style>
