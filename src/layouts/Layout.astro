---
import { getLangFromUrl } from '../i18n/utils';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Portfólio de Isaac Mello - Desenvolvedor Full Stack com expertise em C#, Flutter, JavaScript, TypeScript e mais tecnologias modernas." } = Astro.props;
const lang = getLangFromUrl(Astro.url);
---

<!doctype html>
<html lang={lang} class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- tags SEO -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="author" content="Isaac Dzordi" />
    <meta name="keywords" content="desenvolvedor, full stack, C#, Flutter, JavaScript, TypeScript, Astro, portfolio" />
    
    <!-- meta tags para o open graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    
    <!-- fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    
    <!-- preload -->
    <link rel="preload" href="/favicon.svg" as="image" type="image/svg+xml">
    
    <!-- animações -->
    <link rel="stylesheet" href="/src/styles/animations.css">
  </head>
  
  <body class="font-quantum antialiased transition-colors duration-300">
    <!-- background cósmico -->
    <div id="cosmic-background" class="fixed inset-0 pointer-events-none z-0 overflow-hidden">
      <!-- campo de estrelas -->
      <div class="absolute inset-0">
        <!-- camada de estrelas 1 (distante) -->
        <div class="stars-layer-1 absolute inset-0 opacity-60 dark:opacity-80"></div>
        
        <!-- camada de estrelas 2 (média) -->
        <div class="stars-layer-2 absolute inset-0 opacity-80 dark:opacity-90"></div>
        
        <!-- camada de estrelas 3 (próxima) -->
        <div class="stars-layer-3 absolute inset-0 opacity-100 dark:opacity-100"></div>
        
        <!-- estrelas de disparo - multi-direcional -->
        <div class="meteor-shower absolute inset-0">
          <!-- meteoros de esquerda para direita -->
          <div class="meteor meteor-left-1 absolute w-1 h-1 bg-gradient-to-r from-white via-cyan-300 to-transparent rounded-full shadow-lg"></div>
          <div class="meteor meteor-left-2 absolute w-1 h-1 bg-gradient-to-r from-white via-blue-300 to-transparent rounded-full shadow-lg"></div>
          <div class="meteor meteor-left-3 absolute w-1 h-1 bg-gradient-to-r from-white via-purple-300 to-transparent rounded-full shadow-lg"></div>
          
          <!-- meteoros de direita para esquerda -->
          <div class="meteor meteor-right-1 absolute w-1 h-1 bg-gradient-to-r from-white via-pink-300 to-transparent rounded-full shadow-lg"></div>
          <div class="meteor meteor-right-2 absolute w-1 h-1 bg-gradient-to-r from-white via-yellow-300 to-transparent rounded-full shadow-lg"></div>
          <div class="meteor meteor-right-3 absolute w-1 h-1 bg-gradient-to-r from-white via-green-300 to-transparent rounded-full shadow-lg"></div>
          
          <!-- meteoros de cima para baixo -->
          <div class="meteor meteor-top-1 absolute w-1 h-1 bg-gradient-to-b from-white via-orange-300 to-transparent rounded-full shadow-lg"></div>
          <div class="meteor meteor-top-2 absolute w-1 h-1 bg-gradient-to-b from-white via-red-300 to-transparent rounded-full shadow-lg"></div>
          
          <!-- meteoros diagonais -->
          <div class="meteor meteor-diag-1 absolute w-1 h-1 bg-gradient-to-br from-white via-indigo-300 to-transparent rounded-full shadow-lg"></div>
          <div class="meteor meteor-diag-2 absolute w-1 h-1 bg-gradient-to-bl from-white via-teal-300 to-transparent rounded-full shadow-lg"></div>
          <div class="meteor meteor-diag-3 absolute w-1 h-1 bg-gradient-to-tr from-white via-amber-300 to-transparent rounded-full shadow-lg"></div>
          <div class="meteor meteor-diag-4 absolute w-1 h-1 bg-gradient-to-tl from-white via-rose-300 to-transparent rounded-full shadow-lg"></div>
        </div>
        
        <!-- constelações -->
        <div class="constellations absolute inset-0 opacity-20 dark:opacity-40">
          <!-- constelação 1 - Big Dipper -->
          <div class="constellation big-dipper absolute top-20 left-20 w-32 h-20 opacity-0 animate-constellation-float"></div>
          <!-- constelação 2 - Orion -->
          <div class="constellation orion absolute top-40 right-32 w-24 h-32 opacity-0 animate-constellation-float-reverse"></div>
          <!-- constelação 3 - Cassiopeia -->
          <div class="constellation cassiopeia absolute bottom-32 left-1/4 w-28 h-16 opacity-0 animate-constellation-float"></div>
          <!-- constelação 4 - Southern Cross -->
          <div class="constellation southern-cross absolute bottom-20 right-20 w-20 h-24 opacity-0 animate-constellation-float-reverse"></div>
        </div>
        
        <!-- efeitos de nebulosidade -->
        <div class="nebula-effects absolute inset-0 opacity-15 dark:opacity-25">
          <!-- nebulosa 1 -->
          <div class="nebula nebula-1 absolute top-1/3 left-1/3 w-40 h-32 opacity-0 animate-nebula-drift"></div>
          <!-- nebulosa 2 -->
          <div class="nebula nebula-2 absolute bottom-1/3 right-1/3 w-36 h-28 opacity-0 animate-nebula-drift-reverse"></div>
          <!-- nebulosa 3 -->
          <div class="nebula nebula-3 absolute top-1/2 left-1/2 w-32 h-24 opacity-0 animate-nebula-drift"></div>
        </div>
        
        <!-- efeitos de aurora boreal -->
        <div class="aurora-effects absolute inset-0 opacity-10 dark:opacity-20">
          <div class="aurora aurora-1 absolute top-0 left-0 w-full h-32 opacity-0 animate-aurora-wave"></div>
          <div class="aurora aurora-2 absolute top-0 left-0 w-full h-24 opacity-0 animate-aurora-wave-reverse"></div>
        </div>
        
        <!-- elementos acionados pelo scroll -->
        <div class="scroll-elements absolute inset-0">
          <!-- esferas flutuantes que aparecem ao rolar -->
          <div class="scroll-orb orb-1 absolute w-4 h-4 bg-gradient-to-r from-purple-400 to-blue-400 rounded-full opacity-0 blur-sm"></div>
          <div class="scroll-orb orb-2 absolute w-3 h-3 bg-gradient-to-r from-green-400 to-emerald-400 rounded-full opacity-0 blur-sm"></div>
          <div class="scroll-orb orb-3 absolute w-5 h-5 bg-gradient-to-r from-pink-400 to-rose-400 rounded-full opacity-0 blur-sm"></div>
          <div class="scroll-orb orb-4 absolute w-2 h-2 bg-gradient-to-r from-yellow-400 to-orange-400 rounded-full opacity-0 blur-sm"></div>
          <div class="scroll-orb orb-5 absolute w-4 h-4 bg-gradient-to-r from-cyan-400 to-blue-400 rounded-full opacity-0 blur-sm"></div>
          
          <!-- estrelas laterais -->
          <div class="side-star star-left-1 absolute w-2 h-2 bg-white rounded-full opacity-0 shadow-lg"></div>
          <div class="side-star star-left-2 absolute w-1 h-1 bg-blue-300 rounded-full opacity-0 shadow-lg"></div>
          <div class="side-star star-left-3 absolute w-2 h-2 bg-purple-300 rounded-full opacity-0 shadow-lg"></div>
          
          <div class="side-star star-right-1 absolute w-2 h-2 bg-white rounded-full opacity-0 shadow-lg"></div>
          <div class="side-star star-right-2 absolute w-1 h-1 bg-green-300 rounded-full opacity-0 shadow-lg"></div>
          <div class="side-star star-right-3 absolute w-2 h-2 bg-yellow-300 rounded-full opacity-0 shadow-lg"></div>
          
          <!-- cometas diagonais -->
          <div class="diagonal-comet comet-1 absolute w-3 h-1 bg-gradient-to-r from-white via-cyan-300 to-transparent rounded-full opacity-0 shadow-lg"></div>
          <div class="diagonal-comet comet-2 absolute w-3 h-1 bg-gradient-to-r from-white via-pink-300 to-transparent rounded-full opacity-0 shadow-lg"></div>
          <div class="diagonal-comet comet-3 absolute w-3 h-1 bg-gradient-to-r from-white via-yellow-300 to-transparent rounded-full opacity-0 shadow-lg"></div>
        </div>
      </div>
    </div>
    
    <!-- conteúdo principal -->
    <div class="relative z-10">
      <slot />
    </div>
    
    <!-- script de gerenciamento de tema -->
    <script>
      class LayoutThemeManager {
        private html: HTMLElement;
        private cosmicBackground: HTMLElement | null;
        private currentTheme: string;
        private isInitialized: boolean = false;

        constructor() {
          this.html = document.documentElement;
          this.cosmicBackground = document.getElementById('cosmic-background');
          this.currentTheme = this.getInitialTheme();
          this.init();
        }

        private getInitialTheme(): string {
          try {
            if (typeof localStorage !== 'undefined') {
              const savedTheme = localStorage.getItem('theme');
              if (savedTheme === 'light' || savedTheme === 'dark') {
                return savedTheme;
              }
            }

            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
              return 'dark';
            }

            // padrão para light
            return 'light';
          } catch (error) {
            console.warn('Error getting initial theme, defaulting to light:', error);
            return 'light';
          }
        }

        private init(): void {
          try {
            this.applyTheme(this.currentTheme);
            this.setupSystemThemeListener();
            this.setupThemeChangeListener();
            this.isInitialized = true;
            
            // adiciona um pequeno delay para garantir que o background cósmico está pronto
            setTimeout(() => {
              this.updateCosmicBackground();
            }, 100);
            
            console.log('Layout theme manager initialized successfully');
          } catch (error) {
            throw new Error('Error initializing layout theme manager:');
            this.fallbackToLight();
          }
        }

        private applyTheme(theme: string): void {
          try {
            this.html.classList.remove('light', 'dark');            
            this.html.classList.add(theme);            
            this.html.setAttribute('data-theme', theme);            
            this.currentTheme = theme;            
            this.updateCosmicBackground();            
          } catch (error) {
            throw new Error('Error applying layout theme:');
            this.fallbackToLight();
          }
        }

        private updateCosmicBackground(): void {
          if (this.cosmicBackground) {
            try {
              // força um reflow para garantir que o background atualiza
              this.cosmicBackground.style.display = 'none';
              this.cosmicBackground.offsetHeight; // Trigger reflow
              this.cosmicBackground.style.display = 'block';
            } catch (error) {
              throw new Error('Error updating cosmic background:');
            }
          }
        }

        private fallbackToLight(): void {
          try {
            this.html.classList.remove('dark');
            this.html.classList.add('light');
            this.html.setAttribute('data-theme', 'light');
            this.currentTheme = 'light';
            this.updateCosmicBackground();
            
            if (typeof localStorage !== 'undefined') {
              localStorage.setItem('theme', 'light');
            }
          } catch (error) {
            throw new Error('Error in fallback to light theme:');
          }
        }

        private setupSystemThemeListener(): void {
          if (window.matchMedia) {
            try {
              const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
              
              const handleChange = (e: MediaQueryListEvent) => {
                if (!localStorage.getItem('theme')) {
                  const newTheme = e.matches ? 'dark' : 'light';
                  this.applyTheme(newTheme);
                }
              };

              if (mediaQuery.addEventListener) {
                mediaQuery.addEventListener('change', handleChange);
              } else {
                // fallback para navegadores mais antigos
                mediaQuery.addListener(handleChange);
              }
            } catch (error) {
              throw new Error('Error setting up system theme listener:');
            }
          }
        }

        private setupThemeChangeListener(): void {
          try {
            window.addEventListener('themeChange' as any, (e: CustomEvent) => {
              if (e.detail && e.detail.theme) {
                this.applyTheme(e.detail.theme);
              }
            });
          } catch (error) {
            throw new Error('Error setting up theme change listener:');
          }
        }

        public getCurrentTheme(): string {
          return this.currentTheme;
        }

        public isReady(): boolean {
          return this.isInitialized;
        }
      }

      let layoutThemeManager: LayoutThemeManager | undefined;

      const initializeLayoutTheme = () => {
        try {
          if (!layoutThemeManager) {
            layoutThemeManager = new LayoutThemeManager();
          }
        } catch (error) {
          throw new Error('Error initializing layout theme manager:');
        }
      };

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeLayoutTheme);
      } else {
        initializeLayoutTheme();
      }

      (window as any).addEventListener('load', () => {
        if (!layoutThemeManager || !layoutThemeManager.isReady()) {
          initializeLayoutTheme();
        }
      });

      // Export for debugging (optional)
      if (typeof window !== 'undefined' && layoutThemeManager) {
        (window as any).layoutThemeManager = layoutThemeManager;
      }
    </script>

    <!-- Cosmic Background Scroll Effects Script -->
    <script>
      class CosmicScrollManager {
        private scrollElements: NodeListOf<HTMLElement>;
        private orbs: NodeListOf<HTMLElement>;
        private sideStars: NodeListOf<HTMLElement>;
        private diagonalComets: NodeListOf<HTMLElement>;
        private lastScrollY: number = 0;
        private scrollDirection: 'up' | 'down' = 'down';

        constructor() {
          this.scrollElements = document.querySelectorAll('.scroll-elements > *');
          this.orbs = document.querySelectorAll('.scroll-orb');
          this.sideStars = document.querySelectorAll('.side-star');
          this.diagonalComets = document.querySelectorAll('.diagonal-comet');
          this.init();
        }

        private init(): void {
          this.setupScrollListener();
          this.setupIntersectionObserver();
          this.animateOnLoad();
        }

        private setupScrollListener(): void {
          let ticking = false;

          window.addEventListener('scroll', () => {
            if (!ticking) {
              requestAnimationFrame(() => {
                this.handleScroll();
                ticking = false;
              });
              ticking = true;
            }
          });
        }

        private handleScroll(): void {
          const currentScrollY = window.scrollY;
          const scrollDelta = currentScrollY - this.lastScrollY;
          
          this.scrollDirection = scrollDelta > 0 ? 'down' : 'up';
          this.lastScrollY = currentScrollY;

          // Trigger different effects based on scroll direction
          if (this.scrollDirection === 'down') {
            this.triggerDownScrollEffects(currentScrollY);
          } else {
            this.triggerUpScrollEffects(currentScrollY);
          }

          // Parallax effect for stars
          this.applyParallaxEffect(currentScrollY);
        }

        private triggerDownScrollEffects(scrollY: number): void {
          // Trigger orbs at different scroll positions
          if (scrollY > 100) this.animateOrb(0);
          if (scrollY > 300) this.animateOrb(1);
          if (scrollY > 500) this.animateOrb(2);
          if (scrollY > 700) this.animateOrb(3);
          if (scrollY > 900) this.animateOrb(4);

          // Trigger side stars
          if (scrollY > 200) this.animateSideStar(0, 'left');
          if (scrollY > 400) this.animateSideStar(1, 'left');
          if (scrollY > 600) this.animateSideStar(2, 'left');
          if (scrollY > 250) this.animateSideStar(0, 'right');
          if (scrollY > 450) this.animateSideStar(1, 'right');
          if (scrollY > 650) this.animateSideStar(2, 'right');

          // Trigger diagonal comets
          if (scrollY > 150) this.animateDiagonalComet(0);
          if (scrollY > 350) this.animateDiagonalComet(1);
          if (scrollY > 550) this.animateDiagonalComet(2);
        }

        private triggerUpScrollEffects(scrollY: number): void {
          // Reverse some effects when scrolling up
          if (scrollY < 800) this.reverseOrb(4);
          if (scrollY < 600) this.reverseOrb(3);
          if (scrollY < 400) this.reverseOrb(2);
          if (scrollY < 200) this.reverseOrb(1);
          if (scrollY < 100) this.reverseOrb(0);
        }

        private animateOrb(index: number): void {
          if (this.orbs[index] && !this.orbs[index].classList.contains('visible')) {
            this.orbs[index].classList.add('visible');
            
            // Add floating animation
            this.orbs[index].style.animation = `float 3s ease-in-out infinite`;
          }
        }

        private reverseOrb(index: number): void {
          if (this.orbs[index] && this.orbs[index].classList.contains('visible')) {
            this.orbs[index].classList.remove('visible');
            this.orbs[index].style.animation = '';
          }
        }

        private animateSideStar(index: number, side: 'left' | 'right'): void {
          const starIndex = side === 'left' ? index : index + 3;
          if (this.sideStars[starIndex] && !this.sideStars[starIndex].classList.contains('visible')) {
            this.sideStars[starIndex].classList.add('visible');
          }
        }

        private animateDiagonalComet(index: number): void {
          if (this.diagonalComets[index] && !this.diagonalComets[index].classList.contains('visible')) {
            this.diagonalComets[index].classList.add('visible');
            
            // Add shooting animation
            this.diagonalComets[index].style.animation = `shoot-diagonal 2s ease-out forwards`;
          }
        }

        private applyParallaxEffect(scrollY: number): void {
          const parallaxFactor = 0.5;
          const stars = document.querySelectorAll('.stars-layer-1, .stars-layer-2, .stars-layer-3');
          
          stars.forEach((star, index) => {
            const speed = (index + 1) * parallaxFactor;
            (star as HTMLElement).style.transform = `translateY(${scrollY * speed * 0.1}px)`;
          });
        }

        private setupIntersectionObserver(): void {
          const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -100px 0px'
          };

          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const section = entry.target as HTMLElement;
                this.triggerSectionEffects(section);
              }
            });
          }, observerOptions);

          // Observe all sections
          document.querySelectorAll('section').forEach(section => {
            observer.observe(section);
          });
        }

        private triggerSectionEffects(section: HTMLElement): void {
          const sectionId = section.id;
          
          switch (sectionId) {
            case 'home':
              this.triggerHomeEffects();
              break;
            case 'about':
              this.triggerAboutEffects();
              break;
            case 'projects':
              this.triggerProjectsEffects();
              break;
            case 'contact':
              this.triggerContactEffects();
              break;
          }
        }

        private triggerHomeEffects(): void {
          // Special effects for home section
          this.animateOrb(0);
          this.animateSideStar(0, 'left');
          this.animateSideStar(0, 'right');
        }

        private triggerAboutEffects(): void {
          // Effects for about section
          this.animateOrb(1);
          this.animateOrb(2);
          this.animateDiagonalComet(0);
        }

        private triggerProjectsEffects(): void {
          // Effects for projects section
          this.animateOrb(3);
          this.animateOrb(4);
          this.animateDiagonalComet(1);
          this.animateDiagonalComet(2);
        }

        private triggerContactEffects(): void {
          // Effects for contact section
          this.animateSideStar(1, 'left');
          this.animateSideStar(1, 'right');
          this.animateSideStar(2, 'left');
          this.animateSideStar(2, 'right');
        }

        private animateOnLoad(): void {
          // Trigger initial animations
          setTimeout(() => {
            this.triggerHomeEffects();
          }, 1000);
        }
      }

      // Initialize cosmic scroll manager
      let cosmicScrollManager: CosmicScrollManager | undefined;

      const initializeCosmicScroll = () => {
        try {
          if (!cosmicScrollManager) {
            cosmicScrollManager = new CosmicScrollManager();
          }
        } catch (error) {
          console.error('Error initializing cosmic scroll manager:', error);
        }
      };

      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeCosmicScroll);
      } else {
        initializeCosmicScroll();
      }

      // Export for debugging (optional)
      if (typeof window !== 'undefined' && cosmicScrollManager) {
        (window as any).cosmicScrollManager = cosmicScrollManager;
      }
    </script>

    <!-- Section Animation System - GTA VI Inspired -->
    <script>
      class SectionAnimationManager {
        private sections: NodeListOf<HTMLElement>;
        private animatedElements: NodeListOf<HTMLElement>;
        private observer: IntersectionObserver | null = null;
        private animationQueue: Map<string, HTMLElement[]> = new Map();

        constructor() {
          this.sections = document.querySelectorAll('section');
          this.animatedElements = document.querySelectorAll('[data-animate]');
          this.init();
        }

        private init(): void {
          this.setupIntersectionObserver();
          this.setupScrollAnimations();
          this.initializeAnimationQueue();
        }

        private setupIntersectionObserver(): void {
          const options = {
            threshold: 0.1,
            rootMargin: '0px 0px -100px 0px'
          };

          this.observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const section = entry.target as HTMLElement;
                this.triggerSectionAnimation(section);
              }
            });
          }, options);

          this.sections.forEach(section => {
            this.observer?.observe(section);
          });
        }

        private setupScrollAnimations(): void {
          let ticking = false;

          window.addEventListener('scroll', () => {
            if (!ticking) {
              requestAnimationFrame(() => {
                this.updateScrollAnimations();
                ticking = false;
              });
              ticking = true;
            }
          });
        }

        private initializeAnimationQueue(): void {
          this.sections.forEach(section => {
            const sectionId = section.id;
            const elements = section.querySelectorAll('[data-animate]');
            this.animationQueue.set(sectionId, Array.from(elements) as HTMLElement[]);
          });
        }

        private triggerSectionAnimation(section: HTMLElement): void {
          const sectionId = section.id;
          const elements = this.animationQueue.get(sectionId) || [];

          if (elements.length === 0) return;

          // Trigger animations with staggered delays
          elements.forEach((element, index) => {
            const delay = index * 150; // 150ms between each element
            
            setTimeout(() => {
              this.animateElement(element);
            }, delay);
          });

          // Remove from queue to prevent re-triggering
          this.animationQueue.delete(sectionId);
        }

        private animateElement(element: HTMLElement): void {
          const animationType = element.getAttribute('data-animate');
          const direction = element.getAttribute('data-direction') || 'left';
          const distance = element.getAttribute('data-distance') || '100';

          if (!animationType) return;

          // Set initial state based on animation type
          this.setInitialState(element, animationType, direction, distance);

          // Trigger animation
          requestAnimationFrame(() => {
            element.classList.add('animate-in');
          });
        }

        private setInitialState(element: HTMLElement, type: string, direction: string, distance: string): void {
          const dist = parseInt(distance);
          
          switch (type) {
            case 'slide':
              this.setSlideInitialState(element, direction, dist);
              break;
            case 'fade':
              this.setFadeInitialState(element, dist);
              break;
            case 'scale':
              this.setScaleInitialState(element, direction, dist);
              break;
            case 'rotate':
              this.setRotateInitialState(element, direction, dist);
              break;
            case 'diagonal':
              this.setDiagonalInitialState(element, direction, dist);
              break;
          }
        }

        private setSlideInitialState(element: HTMLElement, direction: string, distance: number): void {
          element.style.transition = 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          
          switch (direction) {
            case 'left':
              element.style.transform = `translateX(-${distance}px)`;
              element.style.opacity = '0';
              break;
            case 'right':
              element.style.transform = `translateX(${distance}px)`;
              element.style.opacity = '0';
              break;
            case 'top':
              element.style.transform = `translateY(-${distance}px)`;
              element.style.opacity = '0';
              break;
            case 'bottom':
              element.style.transform = `translateY(${distance}px)`;
              element.style.opacity = '0';
              break;
          }
        }

        private setFadeInitialState(element: HTMLElement, distance: number): void {
          element.style.transition = 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          element.style.opacity = '0';
          element.style.transform = `scale(0.8)`;
        }

        private setScaleInitialState(element: HTMLElement, direction: string, distance: number): void {
          element.style.transition = 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          element.style.transform = `scale(0.5)`;
          element.style.opacity = '0';
        }

        private setRotateInitialState(element: HTMLElement, direction: string, distance: number): void {
          element.style.transition = 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          element.style.transform = `rotate(${direction === 'left' ? '-' : ''}${distance}deg) scale(0.8)`;
          element.style.opacity = '0';
        }

        private setDiagonalInitialState(element: HTMLElement, direction: string, distance: number): void {
          element.style.transition = 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          
          switch (direction) {
            case 'top-left':
              element.style.transform = `translate(-${distance}px, -${distance}px) rotate(-15deg) scale(0.8)`;
              break;
            case 'top-right':
              element.style.transform = `translate(${distance}px, -${distance}px) rotate(15deg) scale(0.8)`;
              break;
            case 'bottom-left':
              element.style.transform = `translate(-${distance}px, ${distance}px) rotate(15deg) scale(0.8)`;
              break;
            case 'bottom-right':
              element.style.transform = `translate(${distance}px, ${distance}px) rotate(-15deg) scale(0.8)`;
              break;
          }
          
          element.style.opacity = '0';
        }

        private updateScrollAnimations(): void {
          const scrollY = window.scrollY;
          const windowHeight = window.innerHeight;

          this.animatedElements.forEach(element => {
            const rect = element.getBoundingClientRect();
            const elementTop = rect.top;
            const elementBottom = rect.bottom;

            // Check if element is in viewport
            if (elementTop < windowHeight && elementBottom > 0) {
              const progress = this.calculateScrollProgress(elementTop, windowHeight);
              this.updateElementScrollAnimation(element, progress);
            }
          });
        }

        private calculateScrollProgress(elementTop: number, windowHeight: number): number {
          const start = windowHeight * 0.8; // Start animation when element is 80% from top
          const end = windowHeight * 0.2;   // End animation when element is 20% from top
          
          if (elementTop > start) return 0;
          if (elementTop < end) return 1;
          
          return (start - elementTop) / (start - end);
        }

        private updateElementScrollAnimation(element: HTMLElement, progress: number): void {
          const animationType = element.getAttribute('data-scroll-animate');
          
          if (!animationType) return;

          switch (animationType) {
            case 'parallax':
              this.updateParallax(element, progress);
              break;
            case 'fade-in':
              this.updateFadeIn(element, progress);
              break;
            case 'slide-in':
              this.updateSlideIn(element, progress);
              break;
          }
        }

        private updateParallax(element: HTMLElement, progress: number): void {
          const speed = parseFloat(element.getAttribute('data-parallax-speed') || '0.5');
          const y = progress * 100 * speed;
          element.style.transform = `translateY(${y}px)`;
        }

        private updateFadeIn(element: HTMLElement, progress: number): void {
          element.style.opacity = progress.toString();
        }

        private updateSlideIn(element: HTMLElement, progress: number): void {
          const direction = element.getAttribute('data-slide-direction') || 'left';
          const distance = 100;
          const currentDistance = distance * (1 - progress);
          
          switch (direction) {
            case 'left':
              element.style.transform = `translateX(-${currentDistance}px)`;
              break;
            case 'right':
              element.style.transform = `translateX(${currentDistance}px)`;
              break;
            case 'top':
              element.style.transform = `translateY(-${currentDistance}px)`;
              break;
            case 'bottom':
              element.style.transform = `translateY(${currentDistance}px)`;
              break;
          }
          
          element.style.opacity = progress.toString();
        }
      }

      // Initialize section animation manager
      let sectionAnimationManager: SectionAnimationManager | undefined;

      const initializeSectionAnimations = () => {
        try {
          if (!sectionAnimationManager) {
            sectionAnimationManager = new SectionAnimationManager();
          }
        } catch (error) {
          console.error('Error initializing section animations:', error);
        }
      };

      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeSectionAnimations);
      } else {
        initializeSectionAnimations();
      }

      // Export for debugging (optional)
      if (typeof window !== 'undefined' && sectionAnimationManager) {
        (window as any).sectionAnimationManager = sectionAnimationManager;
      }
    </script>
  </body>
</html>

<style is:global>
  /* Cosmic Background Styles */
  #cosmic-background {
    background: linear-gradient(135deg, 
      #f8fafc 0%, 
      #9d9d9d 25%, 
      #ffffff 50%, 
      #9d9d9d 75%, 
      #64748b 100%
    );
    transition: background 0.5s ease-in-out;
  }

  [data-theme="dark"] #cosmic-background {
    background: linear-gradient(135deg, 
      #0f172a 0%, 
      #070707 25%, 
      #070707 50%, 
      #9d9d9d 75%, 
      #64748b 100%
    );
  }

  /* Stars Layer 1 - Distant */
  .stars-layer-1 {
    background-image: 
      radial-gradient(2px 2px at 20px 30px, #eee, transparent),
      radial-gradient(2px 2px at 40px 70px, rgba(255,255,255,0.8), transparent),
      radial-gradient(1px 1px at 90px 40px, #fff, transparent),
      radial-gradient(1px 1px at 130px 80px, rgba(255,255,255,0.6), transparent),
      radial-gradient(2px 2px at 160px 30px, #ddd, transparent);
    background-repeat: repeat;
    background-size: 200px 100px;
    animation: twinkle 8s ease-in-out infinite;
    transition: opacity 0.5s ease-in-out;
  }

  /* Stars Layer 2 - Medium */
  .stars-layer-2 {
    background-image: 
      radial-gradient(1.5px 1.5px at 50px 20px, #fff, transparent),
      radial-gradient(1.5px 1.5px at 100px 60px, rgba(255,255,255,0.9), transparent),
      radial-gradient(1px 1px at 150px 40px, #eee, transparent),
      radial-gradient(1px 1px at 200px 80px, rgba(255,255,255,0.7), transparent),
      radial-gradient(1.5px 1.5px at 250px 30px, #ddd, transparent);
    background-repeat: repeat;
    background-size: 300px 150px;
    animation: twinkle 6s ease-in-out infinite reverse;
    transition: opacity 0.5s ease-in-out;
  }

  /* Stars Layer 3 - Close */
  .stars-layer-3 {
    background-image: 
      radial-gradient(1px 1px at 30px 10px, #fff, transparent),
      radial-gradient(1px 1px at 80px 50px, rgba(255,255,255,0.8), transparent),
      radial-gradient(0.5px 0.5px at 120px 20px, #eee, transparent),
      radial-gradient(0.5px 0.5px at 180px 70px, rgba(255,255,255,0.6), transparent),
      radial-gradient(1px 1px at 220px 40px, #ddd, transparent);
    background-repeat: repeat;
    background-size: 250px 120px;
    animation: twinkle 4s ease-in-out infinite;
    transition: opacity 0.5s ease-in-out;
  }

  /* Shooting Stars */
  .shooting-stars::before,
  .shooting-stars::after {
    content: '';
    position: absolute;
    width: 2px;
    height: 2px;
    background: linear-gradient(45deg, #fff, transparent);
    border-radius: 50%;
    animation: shooting-star 3s linear infinite;
    transition: opacity 0.5s ease-in-out;
  }

  .shooting-stars::before {
    top: 20%;
    left: 10%;
    animation-delay: 0s;
  }

  .shooting-stars::after {
    top: 60%;
    left: 80%;
    animation-delay: 1.5s;
  }

  /* Enhanced Shooting Stars - Multi-directional Meteor Shower */
  .meteor-shower .meteor {
    position: absolute;
    opacity: 0;
    animation: meteor-fall 4s linear infinite;
  }

  /* Meteors from Left to Right */
  .meteor-left-1 {
    top: 15%;
    left: 5%;
    animation-delay: 0s;
  }

  .meteor-left-2 {
    top: 35%;
    left: 8%;
    animation-delay: 1s;
  }

  .meteor-left-3 {
    top: 55%;
    left: 12%;
    animation-delay: 2s;
  }

  /* Meteors from Right to Left */
  .meteor-right-1 {
    top: 25%;
    right: 5%;
    animation-delay: 0.5s;
  }

  .meteor-right-2 {
    top: 45%;
    right: 8%;
    animation-delay: 1.5s;
  }

  .meteor-right-3 {
    top: 65%;
    right: 12%;
    animation-delay: 2.5s;
  }

  /* Meteors from Top to Bottom */
  .meteor-top-1 {
    top: 5%;
    left: 30%;
    animation-delay: 0.8s;
  }

  .meteor-top-2 {
    top: 5%;
    right: 30%;
    animation-delay: 1.8s;
  }

  /* Diagonal Meteors */
  .meteor-diag-1 {
    top: 10%;
    left: 10%;
    animation-delay: 0.3s;
  }

  .meteor-diag-2 {
    top: 20%;
    right: 15%;
    animation-delay: 1.3s;
  }

  .meteor-diag-3 {
    bottom: 20%;
    left: 20%;
    animation-delay: 0.7s;
  }

  .meteor-diag-4 {
    bottom: 30%;
    right: 25%;
    animation-delay: 1.7s;
  }

  /* Enhanced Constellations - Clean and Modern */
  .constellation {
    background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.08) 30%, rgba(255,255,255,0.08) 35%, transparent 35%),
                linear-gradient(-45deg, transparent 30%, rgba(255,255,255,0.08) 30%, rgba(255,255,255,0.08) 35%, transparent 35%);
    border-radius: 50%;
  }

  .big-dipper {
    background: radial-gradient(ellipse at center, rgba(255,255,255,0.1) 0%, transparent 70%);
  }

  .orion {
    background: radial-gradient(ellipse at center, rgba(255,255,255,0.08) 0%, transparent 70%);
  }

  .cassiopeia {
    background: radial-gradient(ellipse at center, rgba(255,255,255,0.06) 0%, transparent 70%);
  }

  .southern-cross {
    background: radial-gradient(ellipse at center, rgba(255,255,255,0.07) 0%, transparent 70%);
  }

  /* Enhanced Nebula Effects - Subtle and Clean */
  .nebula {
    background: radial-gradient(ellipse, rgba(147, 51, 234, 0.08) 0%, transparent 70%);
    border-radius: 50%;
  }

  .nebula-1 {
    background: radial-gradient(ellipse, rgba(147, 51, 234, 0.08) 0%, transparent 70%);
  }

  .nebula-2 {
    background: radial-gradient(ellipse, rgba(59, 130, 246, 0.08) 0%, transparent 70%);
  }

  .nebula-3 {
    background: radial-gradient(ellipse, rgba(236, 72, 153, 0.08) 0%, transparent 70%);
  }

  /* Aurora Effects - Subtle Northern Lights */
  .aurora {
    background: linear-gradient(90deg, 
      transparent 0%, 
      rgba(34, 197, 94, 0.05) 20%, 
      rgba(59, 130, 246, 0.05) 40%, 
      rgba(147, 51, 234, 0.05) 60%, 
      rgba(236, 72, 153, 0.05) 80%, 
      transparent 100%
    );
    border-radius: 50%;
  }

  /* Animations */
  @keyframes twinkle {
    0%, 100% { opacity: 0.3; }
    50% { opacity: 1; }
  }

  @keyframes shooting-star {
    0% {
      transform: translateX(-100px) translateY(0) rotate(45deg);
      opacity: 1;
    }
    70% {
      opacity: 1;
    }
    100% {
      transform: translateX(400px) translateY(100px) rotate(45deg);
      opacity: 0;
    }
  }

  @keyframes constellation-float {
    0%, 100% {
      transform: translateY(0px) rotate(0deg);
      opacity: 0;
    }
    50% {
      transform: translateY(-15px) rotate(3deg);
      opacity: 1;
    }
  }

  @keyframes constellation-float-reverse {
    0%, 100% {
      transform: translateY(0px) rotate(0deg);
      opacity: 0;
    }
    50% {
      transform: translateY(15px) rotate(-3deg);
      opacity: 1;
    }
  }

  @keyframes nebula-drift {
    0%, 100% {
      transform: translateX(0px) translateY(0px) scale(1);
      opacity: 0;
    }
    50% {
      transform: translateX(20px) translateY(-15px) scale(1.05);
      opacity: 1;
    }
  }

  @keyframes nebula-drift-reverse {
    0%, 100% {
      transform: translateX(0px) translateY(0px) scale(1);
      opacity: 0;
    }
    50% {
      transform: translateX(-20px) translateY(15px) scale(1.05);
      opacity: 1;
    }
  }

  @keyframes aurora-wave {
    0%, 100% {
      transform: translateY(-100px) scaleX(1);
      opacity: 0;
    }
    50% {
      transform: translateY(0px) scaleX(1.1);
      opacity: 1;
    }
  }

  @keyframes aurora-wave-reverse {
    0%, 100% {
      transform: translateY(100px) scaleX(1);
      opacity: 0;
    }
    50% {
      transform: translateY(0px) scaleX(1.1);
      opacity: 1;
    }
  }

  @keyframes meteor-fall {
    0% {
      transform: translateX(-100px) translateY(0) rotate(45deg);
      opacity: 1;
    }
    70% {
      opacity: 1;
    }
    100% {
      transform: translateX(400px) translateY(200px) rotate(45deg);
      opacity: 0;
    }
  }

  @keyframes meteor-fall-right {
    0% {
      transform: translateX(100px) translateY(0) rotate(-45deg);
      opacity: 1;
    }
    70% {
      opacity: 1;
    }
    100% {
      transform: translateX(-400px) translateY(200px) rotate(-45deg);
      opacity: 0;
    }
  }

  @keyframes meteor-fall-top {
    0% {
      transform: translateX(0) translateY(-100px) rotate(0deg);
      opacity: 1;
    }
    70% {
      opacity: 1;
    }
    100% {
      transform: translateX(0) translateY(400px) rotate(0deg);
      opacity: 0;
    }
  }

  @keyframes meteor-fall-diagonal {
    0% {
      transform: translateX(-100px) translateY(-100px) rotate(45deg);
      opacity: 1;
    }
    70% {
      opacity: 1;
    }
    100% {
      transform: translateX(400px) translateY(400px) rotate(45deg);
      opacity: 0;
    }
  }

  /* Apply different animations to different meteor types */
  .meteor-left-1, .meteor-left-2, .meteor-left-3 {
    animation: meteor-fall 4s linear infinite;
  }

  .meteor-right-1, .meteor-right-2, .meteor-right-3 {
    animation: meteor-fall-right 4s linear infinite;
  }

  .meteor-top-1, .meteor-top-2 {
    animation: meteor-fall-top 4s linear infinite;
  }

  .meteor-diag-1, .meteor-diag-2, .meteor-diag-3, .meteor-diag-4 {
    animation: meteor-fall-diagonal 4s linear infinite;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .constellation {
      display: none;
    }
    
    .nebula {
      display: none;
    }
    
    .aurora {
      display: none;
    }
    
    .meteor-shower .meteor {
      animation-duration: 3s;
    }
    
    .scroll-elements {
      display: none;
    }
  }

  @media (max-width: 480px) {
    .meteor-shower .meteor {
      animation-duration: 2.5s;
    }
  }

  /* Additional animations for scroll effects */
  @keyframes float {
    0%, 100% {
      transform: translateY(0px) scale(1);
    }
    50% {
      transform: translateY(-20px) scale(1.1);
    }
  }

  @keyframes shoot-diagonal {
    0% {
      transform: translateX(-100px) translateY(-100px) scale(0.5);
      opacity: 0;
    }
    20% {
      opacity: 1;
    }
    80% {
      opacity: 1;
    }
    100% {
      transform: translateX(400px) translateY(400px) scale(1);
      opacity: 0;
    }
  }

  /* Scrollbar personalizada */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: transparent;
  }
  
  ::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #424242, #696969);
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #696969, #0f1011);
  }
  
  /* Seleção de texto */
  ::selection {
    background: linear-gradient(135deg, #696969, #0f1011);
    color: white;
  }
  
  /* Smooth scrolling para navegação interna */
  html {
    scroll-behavior: smooth;
  }
</style>
